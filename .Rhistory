x <- sapply(training[1:4, ], class)
for (x in names(test.data)) {
test.data[, x] <- eval(call(paste0("as.", classnames[x]), test.data[, x]),
test.data[, x])
}
classnames <- sapply(training[1:4, ], class)
for (x in names(test.data)) {
test.data[, x] <- eval(call(paste0("as.", classnames[x]), test.data[, x]),
test.data[, x])
}
classnames <- sapply(training[1:4, ], class)
test.data <- as.data.frame(lapply(training[1:4,],
function(x) rep.int(0, length(x))))
#    a. TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2
test.data[1, "TotalIntench2"] <- 23000
test.data[1, "FiberWidthCh1"] <- 10
test.data[1, "PerimStatusCh1"] <- 2
#    b. TotalIntench2 = 50,000; FiberWidthCh1 = 10;VarIntenCh4 = 100
test.data[2, "TotalIntench2"] <- 50000
test.data[2, "FiberWidthCh1"] <- 10
test.data[2, "VarIntenCh4"] <- 100
#    c. TotalIntench2 = 57,000; FiberWidthCh1 = 8;VarIntenCh4 = 100
test.data[3, "TotalIntench2"] <- 57000
test.data[3, "FiberWidthCh1"] <- 8
test.data[3, "VarIntenCh4"] <- 100
#    d. FiberWidthCh1 = 8;VarIntenCh4 = 100; PerimStatusCh1=2
test.data[4, "FiberWidthCh1"] <- 8
test.data[4, "VarIntenCh4"] <- 100
test.data[4, "PerimStatusCh1"] <- 2
for (x in names(test.data)) {
test.data[, x] <- eval(call(paste0("as.", classnames[x]), test.data[, x]),
test.data[, x])
}
for (x in names(test.data)) {
test.data[, x] <- eval(call(paste0("as.", classnames[x]), test.data[, x]))
}
eval(call(paste0("as.", classnames[x]), test.data[, x]))
x
classnames <- sapply(training[1:4, ], class)
x <- classnames[1]
eval(call(paste0("as.", classnames[x]), test.data[, x]))
View(test.data)
classnames <- sapply(training[1:4, ], class)
test.data <- as.data.frame(lapply(training[1:4,],
function(x) rep.int(0, length(x))))
for (x in names(test.data)) {
test.data[, x] <- eval(call(paste0("as.", classnames[x]), test.data[, x]))
}
View(test.data)
sapply(test.data, class)
sapply(training, class)
# ATTEMPT
library(rpart)
training = segmentationOriginal[segmentationOriginal$Case == "Train", ]
testing = segmentationOriginal[segmentationOriginal$Case != "Train", ]
set.seed(125)
train <- train(x = training[ , names(subset(training, select = -Class))],
y = training[, "Class"],
method = "rpart",
na.action = na.pass)
classnames <- sapply(training[1:4, ], class)
test.data <- as.data.frame(lapply(training[1:4,],
function(x) rep.int(0, length(x))))
for (x in names(test.data)) {
test.data[, x] <- eval(call(paste0("as.", classnames[x]), test.data[, x]))
}
#    a. TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2
test.data[1, "TotalIntench2"] <- 23000
test.data[1, "FiberWidthCh1"] <- 10
test.data[1, "PerimStatusCh1"] <- 2
#    b. TotalIntench2 = 50,000; FiberWidthCh1 = 10;VarIntenCh4 = 100
test.data[2, "TotalIntench2"] <- 50000
test.data[2, "FiberWidthCh1"] <- 10
test.data[2, "VarIntenCh4"] <- 100
#    c. TotalIntench2 = 57,000; FiberWidthCh1 = 8;VarIntenCh4 = 100
test.data[3, "TotalIntench2"] <- 57000
test.data[3, "FiberWidthCh1"] <- 8
test.data[3, "VarIntenCh4"] <- 100
#    d. FiberWidthCh1 = 8;VarIntenCh4 = 100; PerimStatusCh1=2
test.data[4, "FiberWidthCh1"] <- 8
test.data[4, "VarIntenCh4"] <- 100
test.data[4, "PerimStatusCh1"] <- 2
predict(object = train$finalModel, test.data)
class(classnames[1])
classnames <- sapply(training[1:4, ], function(x) {
if (class(x) != factor) {
return(class(x))
}
})
classnames <- sapply(training[1:4, ], function(x) {
if (class(x) != factor) {
return(name(x) = class(x))
}
})
return("shu" = class(x))
classnames <- sapply(training[1:4, ], function(x) {
if (class(x) != factor) {
return("shu" = class(x))
}
})
names(classnames[1])
classnames <- sapply(training[1:4, ], function(x) {
if (class(x) != factor) {
toReturn <- class(x)
names(toReturn) <- names(x)
return(toReturn)
}
})
classnames <- sapply(training[1:4, ], function(x) {
if (! is.factor(x)) {
toReturn <- class(x)
names(toReturn) <- names(x)
return(toReturn)
}
})
View(classnames)
classnames <- sapply(training[1:4, ], function(x) {
if (! is.factor(x)) {
toReturn <- class(x)
names(toReturn) <- names(x)
return(toReturn)
} else {
return(NULL)
}
})
install.packages(rattle)
library(rpart.plot)
fancyRpartPlot(train$finalModel)
install.packages(fancyRpartPlot)
install.packages("fancyRpartPlot")
library(rpart.plot)
fancyRpartPlot(train$finalModel)
install.packages("rattle")
library(rpart.plot)
fancyRpartPlot(train$finalModel)
rpart.plot(train$finalModel)
install.packages("pgmm")
# Q3.
# Load the olive oil data using the commands:
library(pgmm)
data(olive)
olive = olive[,-1]
# Q3.
# Load the olive oil data using the commands:
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
head(olive)
# ATTEMPT
train <- train(Area ~ .,
data = olive,
method = "tree")
# ATTEMPT
train <- train(Area ~ .,
data = olive,
method = "rpart")
predict(train, newdata = newdata)
olive$Area
# Q4.
# Load the South Africa Heart Disease Data and create training and test sets
# with the following code:
library(ElemStatLearn)
install.packages("ElemStatLearn")
# Q4.
# Load the South Africa Heart Disease Data and create training and test sets
# with the following code:
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
# Then set the seed to 13234 and fit a logistic regression model (method="glm",
# be sure to specify family="binomial") with Coronary Heart Disease (chd) as
# the outcome and age at onset, current alcohol consumption, obesity levels,
# cumulative tabacco, type-A behavior, and low density lipoprotein cholesterol
# as predictors. Calculate the misclassification rate for your model using this
# function and a prediction on the "response" scale:
missClass = function(values, prediction) {
sum(((prediction > 0.5)*1) != values) / length(values)
}
# ATTEMPT
set.seed(13234)
str(train)
str(trainSA)
train <- train(chd ~ age + alcohol + obesity + tobacco +typea + ldl,
method = "glm",
family = "binomial")
pred <- predict(testSA$chd, predict(train, trainSA$chd))
pred <- confusionMatrix(testSA$chd, predict(train, trainSA$chd))
train <- train(chd ~ age + alcohol + obesity + tobacco +typea + ldl,
data = trainSA,
method = "glm",
family = "binomial")
pred <- confusionMatrix(testSA$chd, predict(train, trainSA$chd))
pred <- confusionMatrix(testSA$chd,
predict(train,
trainSA[, c("age", "alcohol", "obesity",
"tobacco", "typea", "ldl")]))
pred <- confusionMatrix(testSA$chd,
predict(train,
testSA[, c("age", "alcohol", "obesity",
"tobacco", "typea", "ldl")]))
pred <- confusionMatrix(testSA$chd,
predict(train,
testSA))
train <- train(chd ~ age + alcohol + obesity + tobacco +typea + ldl,
data = trainSA,
method = "glm",
family = "binomial")
trainSA$chd
train <- train(I(factor(chd)) ~ age + alcohol + obesity + tobacco +typea + ldl,
data = trainSA,
method = "glm",
family = "binomial")
pred <- confusionMatrix(testSA$chd, predict(train, testSA))
pred
pred <- predict(train, testSA)
pred
pred <- predict(train, trainSA)
train$pred
train$results
missClass(factor(trainSA$chd), pred)
factor(trainSA$chd)
pred
missClass(trainSA$chd, pred)
missClass(trainSA$chd, numeric(pred))
missClass(trainSA$chd, as.numeric(pred,))
missClass(trainSA$chd, as.numeric(pred))
1 - missClass(trainSA$chd, as.numeric(pred))
train <- train(chd ~ age + alcohol + obesity + tobacco +typea + ldl,
data = trainSA,
method = "glm",
family = "binomial")
pred <- predict(train, trainSA)
missClass(trainSA$chd, pred)
# TEST SET
pred <- predict(train, testSA)
missClass(testSA, pred)
missClass(testSA$chd, pred)
# TRAINING SET
pred <- predict(train, trainSA)
missClass(trainSA$chd, pred)
# TEST SET
pred <- predict(train, testSA)
missClass(testSA$chd, pred)
# Q5.
# Load the vowel.train and vowel.test data sets:
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
rm(list = ls())
# Q5.
# Load the vowel.train and vowel.test data sets:
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
train <- train(y ~ .,
data = vowel.train,
method = "rf")
# ATTEMPT
set.seed(33833)
train <- train(y ~ .,
data = vowel.train,
method = "rf")
varImp(train)
varImp(train$finalModel)
varImp(train, useModel = "rf")
varImp(train$finalModel, useModel = "rf")
varImp(train, scale = FALSE)
train$finalModel
train <- train(y ~ .,
data = vowel.train,
method = "rf",
importance = TRUE,
verbose = TRUE,
prox = TRUE)
varImp(train)
train <- randomForest::randomForest(y ~ .,
data = vowel.train,
method = "rf",
importance = TRUE,
verbose = TRUE,
prox = TRUE)
varImp(train)
# ATTEMPT
library(randomForest)
train <- randomForest(y ~ .,
data = vowel.train,
method = "rf",
importance = TRUE,
verbose = TRUE,
prox = TRUE)
train <- randomForest(y ~ .,
data = vowel.train,
method = "rf")
varImp(train)
varImp(train, scale = FALSE)
train <- randomForest(y ~ .,
data = vowel.train,
method = "rf",
importance = TRUE,
verbose = TRUE,
prox = TRUE)
varImp(train, scale = FALSE)
train <- train(y ~ .,
data = vowel.train,
method = "rf",
importance = TRUE,
verbose = TRUE,
prox = TRUE)
varImp(train, scale = FALSE)
train <- train(factor(y) ~ .,
data = vowel.train,
method = "rf",
importance = TRUE,
verbose = TRUE,
prox = TRUE)
varImp(train, scale = FALSE)
varImp(train, decreasing = TRUE)
varImp(train[11], decreasing = TRUE)
varImp(train[, 11], decreasing = TRUE)
varImp(train$finalModel, decreasing = TRUE)
train
arrange(varImp(train$finalModel), decreasing = TRUE)
arrange(decreasing(varImp(train$finalModel)))
arrange(desc(varImp(train$finalModel)))
varImp(train, decreasing = TRUE)
varImp(train)
order(varImp(train), descending = TRUE)
order(varImp(train), decreasing = TRUE)
order(varImp(train$finalModel), decreasing = TRUE)
order(varImp(train$finalModel, scale = FALSE), decreasing = TRUE)
knit_with_parameters('~/Projects/Courses/Coursera/Practical Machine Learning/Human-Activity-Recognition/HumanActivityRecognition.Rmd')
plot7 <- plot.roc.curve.2("Ensemble Model", ensemble.confusion.matrix)
set.seed(11111)
library(dplyr)
library(caret)
library(ggplot2)
library(reshape2)
library(pROC)
library(MLmetrics)
library(gridExtra)
plot7 <- plot.roc.curve.2("Ensemble Model", ensemble.confusion.matrix)
# official
plot.roc.curve.2 <- function(model.name, train.and.predict.object) {
confusion.matrix <- train.and.predict.object$confusion.matrix
# Accuracy
out.of.sample.error <- train.and.predict.object$out.of.sample.error
by.class <- confusion.matrix$byClass[, c("Sensitivity",
"Specificity")]
p <- ggplot(x = NA, y = NA, xlim = c(0,1), ylim = c(0,1)) +
geom_line(aes(x = c(0, 1 - by.class[1, "Specificity"], 1),
y = c(0, by.class[1, "Sensitivity"], 1)),
colour = 2, lwd = 1) +
geom_line(aes(x = c(0, 1 - by.class[2, "Specificity"], 1),
y = c(0, by.class[2, "Sensitivity"], 1)),
colour = 3, lwd = 1) +
geom_line(aes(x = c(0, 1 - by.class[3, "Specificity"], 1),
y = c(0, by.class[3, "Sensitivity"], 1)),
colour = 4, lwd = 1) +
geom_line(aes(x = c(0, 1 - by.class[4, "Specificity"], 1),
y = c(0, by.class[4, "Sensitivity"], 1)),
colour = 5, lwd = 1) +
geom_line(aes(x = c(0, 1 - by.class[5, "Specificity"], 1),
y = c(0, by.class[5, "Sensitivity"], 1)),
colour = 6, lwd = 1) +
geom_line(aes(x = c(0, 1), y = c(0, 1))) +
labs(y = 'True Positive Rate',
x = 'False Positive Rate',
title = paste("ROC Curves Per Activity Class (", model.name, ")"),
subtitle = paste("Model has an Overall Out-of-Sample-Error of ",
out.of.sample.error))
p
}
plot1 <- plot.roc.curve.2("Decision Tree", decision.tree.confusion.matrix)
load("~/Projects/Courses/Coursera/Practical Machine Learning/Human-Activity-Recognition/cache/cache.data.RData")
plot6 <- plot.roc.curve.2("Neural Networks", neural.network.confusion.matrix)
freq.plot <- ggplot() +
suppressWarnings(geom_histogram(aes(x = as.numeric(test.pca$classe), fill = test.pca$classe),
stat = "count")) +
theme(legend.position = "bottom") +
scale_fill_manual(name = "Activity Classes", values = 2:6) +
labs(y = 'Frequency',
x = 'Activity Classes',
title = paste("Fig 3. Frequency Plot Per Activity Classes"))
# gets legend to be used in roc curves
get.legend <- function(a.gplot) {
tmp <- ggplot_gtable(ggplot_build(a.gplot))
leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
legend <- tmp$grobs[[leg]]
return(legend)
}
custom.legend <- get.legend(freq.plot)
grid.arrange(plot1, custom.legend, ncol = 1, nrow = 2, heights = c(10, 1))
grid.arrange(plot7, custom.legend, ncol = 1, nrow = 2, heights = c(10, 1))
grid.arrange(plot6, custom.legend, ncol = 1, nrow = 2, heights = c(10, 1))
plot.roc.curve <- function(model.name, confusion.matrix) {
# Accuracy
accuracy <- round(confusion.matrix$overall["Accuracy"], 2)
plot(x = NA, y = NA, xlim = c(0,1), ylim = c(0,1),
ylab = 'True Positive Rate',
xlab = 'False Positive Rate',
bty = 'n',
main = paste("ROC Curves Per Activity (", model.name, ")"),
sub = paste("Model has an Overall Accuracy of ", accuracy))
by.class <- confusion.matrix$byClass[, c("Sensitivity",
"Specificity")]
for(i in 1 : dim(by.class)[1]) {
x <- c(0, 1 - by.class[i, "Specificity"], 1)
y <- c(0, by.class[i, "Sensitivity"], 1)
lines(y ~ x, col= i + 1, lwd=2)
}
lines(x=c(0,1), c(0,1))
legend(x = "bottomright",
legend = c("Activity A",
"Activity B",
"Activity C",
"Activity D",
"Activity E"),
fill = 1 : dim(by.class)[1] + 1)
}
plot6 <- plot.roc.curve("Neural Networks", neural.network.confusion.matrix)
grid.arrange(plot6, custom.legend, ncol = 1, nrow = 2, heights = c(10, 1))
plot6
colnames(test.data.raw)
validation.pca <- predict(object = preprocess.pca,
newdata = subset(test.data.raw, select = -problem_id))
predict(object = nnet, newdata = validation.pca)
predict(object = svmpoly, newdata = validation.pca)
predict(object = svm.model, newdata = validation.pca)
str(validation.pca)
test.data.raw
subset(test.data.raw, select = -problem_id)
predict(object = preprocess.pca,
newdata = subset(test.data.raw, select = -problem_id))
colnames(predict(object = preprocess.pca,
newdata = subset(test.data.raw, select = -problem_id)))
test.data.reduced
unlabeled.data.pca <- predict(object = preprocess.pca,
newdata = subset(test.data.reduced, select = -problem_id))
predict(object = svm.model, newdata = unlabeled.data.pca)
unlabeled.data.pca
predict(object = svmpoly, newdata = unlabeled.data.pca)
?svmPoly
??svmPoly
unlink('Projects/Courses/Coursera/Practical Machine Learning/Human-Activity-Recognition/HumanActivityRecognition_cache', recursive = TRUE)
unlink('Projects/Courses/Coursera/Practical Machine Learning/Human-Activity-Recognition/HumanActivityRecognition_cache', recursive = TRUE)
remove.packages(c("ggplot2", "data.table"))
install.packages('Rcpp', dependencies = TRUE)
install.packages('ggplot2', dependencies = TRUE)
install.packages('data.table', dependencies = TRUE)
shiny::runApp('Projects/Courses/Coursera/Developing Data Products/Project_2/UPLB_Enrolment')
runApp('Projects/Courses/Coursera/Developing Data Products/Project_2/UPLB_Enrolment')
library(plotly)
install.packages("Rcpp",  dependencies = TRUE, repos = "http://cran.us.r-project.org")
install.packages("Rcpp", dependencies = TRUE, repos = "http://cran.us.r-project.org")
install.packages("Rcpp",  dependencies = TRUE, repos = "http://cran.us.r-project.org")
install.packages("Rcpp")
shiny::runApp('Projects/Courses/Coursera/Developing Data Products/Project_2/UPLB_Enrolment')
library(plotly)
install.packages("plotly")
rm(list = ls())
library(plotly)
remove.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
library(plotly)
update.packages(ask = FALSE)
install.packages("Rcpp")
install.packages("Rcpp")
(plotly)
library(plotly)
library(shiny)
library(dplyr)
remove.packages("Rcpp")
install.packages("Rcpp", type = 'source')
install.packages("Rcpp", type = "source")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
library(shiny); runApp('Projects/Courses/Coursera/Developing Data Products/Project_2/raw_code.R')
library(plotly)
library(shiny)
library(miniUI)
library(dplyr)
install.packages("Rcpp")
install.packages("Rcpp")
library(plotly)
remove.packages("plotly")
install.packages("plotly")
shiny::runApp('Projects/Courses/Coursera/Developing Data Products/Project_2/UPLB_Enrolment')
install.packages("plotly")
runApp('Projects/Courses/Coursera/Developing Data Products/Project_2/UPLB_Enrolment')
library(plotly)
library(shiny)
library(dplyr)
library(ggplot2)
runApp('Projects/Courses/Coursera/Developing Data Products/Project_2/UPLB_Enrolment')
runApp('Projects/Courses/Coursera/Developing Data Products/Project_2/UPLB_Enrolment')
runApp('Projects/Courses/Coursera/Developing Data Products/Project_2/UPLB_Graduate_Program_Enrolment_Statistics_2018_2019/UPLB_Enrolment')
runApp('Projects/Courses/Coursera/Developing Data Products/Project_2/UPLB_Graduate_Program_Enrolment_Statistics_2018_2019/UPLB_Enrolment')
setwd("../")
getwd()
setwd("~/Projects/Courses/Coursera/Developing Data Products/Project_3/Registry_System_for_Basic_Sectors_in_Agriculture/")
dir()
getwd()
dir()
shiny::runApp('Shiny_App')
runApp('Shiny_App')
